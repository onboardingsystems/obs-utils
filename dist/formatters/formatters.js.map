{"version":3,"sources":["formatters.js"],"names":[],"mappings":"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","file":"dist/formatters/formatters.js","sourcesContent":["const _       = require('lodash')\nconst moment  = require('moment')\nconst numeral = require('numeral')\n\nconst Formatters = {\n\n  addressLines(addressObj) {\n    if (_.isEmpty(_.omitBy(addressObj, _.isEmpty)))\n      return []\n    var line1 = addressObj.street_1\n    var line2 = null\n    var line3 = `${addressObj.city}, ${addressObj.state} ${addressObj.zip}`\n    return _.compact(_.concat([], line1, line2, line3))\n  },\n\n  addressOneLine(addressObj) {\n    if (_.isEmpty(_.omitBy(addressObj, _.isEmpty)))\n      return ''\n    return this.addressLines(addressObj).join(', ')\n  },\n\n  currencyDisplay(value, format='dollars') {\n    var numObj\n    numObj = numeral(value)\n    if (format === 'dollars')\n      return numObj.format('$0,0')\n    else\n      return numObj.format('$0,0.00')\n  },\n\n  ordinalize(value) {\n    var ordinal, last_2\n    value = (value || \"\").toString()\n    if (_.isEmpty(value))\n      return ''\n    // check what digit the number ends with for choosing the correct text\n    // ending\n    switch (value.charAt(value.length - 1)) {\n      case '1':\n        ordinal = 'st'\n        break;\n      case '2':\n        ordinal = 'nd'\n        break;\n      case '3':\n        ordinal = 'rd'\n        break;\n      default:\n        ordinal = 'th'\n    }\n    // address some exceptions when looking at larger portion\n    last_2 = value.slice(-2)\n    if (last_2 == '11' || last_2 == '12' || last_2 == '13')\n      ordinal = 'th'\n\n    return value + ordinal\n  },\n\n  // ########\n  //\n  timeFormat:         'h:mm a',\n  // Standard Date Formatter (ex: Jun 3, 2014) - uses locale settings\n  dateFormat:         'll',\n  dollarsFormat:      '$0,0',\n  dollarsCentsFormat: '$0,0.00',\n  monthYearFormat:    'MMM YYYY',\n  monthDayYearFormat: 'MMM D, YYYY',\n  // Default detailed date/time display format\n  dateTimeDetailedFormat: 'MMM DD, YYYY  h:mm:ss a',\n\n\n  // Relative language description of the date/time (ex: \"3 days ago\", \"seconds ago\")\n  timeAgoDisplay(value) {\n    if (_.isEmpty(value))\n      return null\n    return this.parseDate(value).fromNow()\n  },\n\n\n  // Standard Date and Time Formatter (ex: Jun 3, 2014 3:05:53 p)\n  datetimeDisplay(value) {\n    if (_.isEmpty(value))\n      return null\n    return this.parseDate(value).format(this.dateTimeDetailedFormat)\n  },\n\n\n  stringFormatter(value, options={}) {\n    var options = _.merge({}, {required: false}, options)\n    var parsed, formatted, errors = []\n\n    if (_.isNumber(value))\n      value = value.toString()\n    if (_.isEmpty(value))\n      value = \"\"\n    parsed = _.trim(value.toString())\n    if (options.required && _.isEmpty(parsed))\n      errors.push('is required')\n    return {\n      valid: errors.length === 0,\n      parsed,\n      formatted: parsed,\n      errors\n    }\n  },\n\n  phoneFormatter(value, options={}) {\n    var val, valid, parsed, formatted, errors = []\n    val = Formatters.stringFormatter(value, options)\n    if (_.isEmpty(val.parsed))\n      return val\n    // remove all non-digits\n    parsed = val.parsed.replace(/\\D/g, '')\n    valid = parsed.length === 10\n    if (valid) {\n      formatted = parsed.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3')\n    } else {\n      formatted = parsed\n      errors.push('invalid phone number')\n    }\n    return {\n      valid,\n      parsed,\n      formatted,\n      errors\n    }\n  },\n\n  ssnFormatter(value, options={}) {\n    var val, valid, parsed, formatted, errors = []\n    val = Formatters.stringFormatter(value, options)\n    if (_.isEmpty(val.parsed))\n      return val\n    // remove all non-digits\n    parsed = val.parsed.replace(/\\D/g, '')\n    valid = parsed.length === 9\n    if (valid) {\n      formatted = parsed.replace(/^(\\d{3})(\\d{2})(\\d{4})$/, \"$1-$2-$3\")\n    } else {\n      formatted = parsed\n      errors.push('invalid SSN')\n    }\n    return {\n      valid,\n      parsed,\n      formatted,\n      errors\n    }\n  },\n\n  stateFormatter(value, options={}) {\n    var val, valid, parsed, formatted, errors = []\n    val = Formatters.stringFormatter(value, options)\n    if (_.isEmpty(val.parsed))\n      return val\n    // remove 0-9\n    parsed = _.toUpper(val.parsed.replace(/\\d/g, ''))\n    valid = parsed.length === 2\n    if (valid) {\n      formatted = parsed.replace(/^(\\D{2})$/, \"$1\")\n    } else {\n      formatted = parsed\n      errors.push('invalid state')\n    }\n    return {\n      valid,\n      parsed,\n      formatted,\n      errors\n    }\n  },\n\n  zipcodeFormatter(value, options={}) {\n    var val, valid, parsed, formatted, errors = []\n    val = Formatters.stringFormatter(value, options)\n    if (_.isEmpty(val.parsed))\n      return val\n    // remove all non-digits\n    parsed = val.parsed.replace(/\\D/g, '')\n    valid = parsed.length === 5\n    if (valid) {\n      formatted = parsed.replace(/^(\\d{5})$/, \"$1\")\n    } else {\n      formatted = parsed\n      errors.push('is invalid')\n    }\n    return {\n      valid,\n      parsed,\n      formatted,\n      errors\n    }\n  },\n\n  // Currency formatting and validation.\n  //\n  // Options:\n  //   * format - 'dollars' to suppress display of cents. 'cents' - default, full display.\n  currencyFormatter(value, options={}) {\n    var val, numObj, valid, parsed, formatted, errors = []\n    val = Formatters.stringFormatter(value, options)\n    if (_.isEmpty(val.parsed))\n      return val\n    options = _.merge({}, {format: 'cents'}, options)\n    // remove '$', spaces and ','.\n    // Using numeral, convert to a number.\n    numObj = numeral(_.trim(val.parsed.replace(/[$\\s,]/g, '')))\n    parsed = numObj.value()\n    // TODO: numeraljs does not throw errors.... we might want to think about\n    // detecting our own?\n    valid = true\n    if (options.format == 'dollars')\n      formatted = numObj.format('$0,0')\n    else\n      formatted = numObj.format('$0,0.00')\n    return {\n      valid,\n      parsed,\n      formatted,\n      errors\n    }\n  },\n\n  dollarsFormatter(value, options={}) {\n    options['format'] = 'dollars'\n    return Formatters.currencyFormatter(value, options)\n  },\n\n  // Date formatting and validation.\n  //\n  // Options:\n  //  * format - 'full-date' for \"MMM DD, YYYY\". 'month-year' for \"MMM YYYY\"\n  dateFormatter(value, options={}) {\n    var val, temp, valid, parsed, formatted, errors = []\n    val = Formatters.stringFormatter(value, options)\n    if (_.isEmpty(val.parsed))\n      return val\n    options = _.merge({}, {format: 'full-date'}, options)\n    temp = this.parseDate(val.parsed)\n    valid = temp.isValid()\n    if (valid) {\n      // store parsed value as just the date portion.\n      parsed = temp.format('YYYY-MM-DD')\n      if (options.format == 'month-year')\n        formatted = temp.format(this.monthYearFormat)\n      else\n        formatted = temp.format(this.monthDayYearFormat)\n    } else {\n      errors.push('invalid date')\n      formatted = value\n    }\n    return {\n      valid,\n      parsed,\n      formatted,\n      errors\n    }\n  },\n\n  // Time formatting and validation.\n  //\n  // Options:\n  //   * format - 'full-date' for \"MMM DD, YYYY\". 'month-year' for \"MMM YYYY\"\n  timeFormatter(value, options={}) {\n    var val, temp, valid, parsed, formatted, errors = []\n    val = Formatters.stringFormatter(value, options)\n    if (_.isEmpty(val.parsed))\n      return val\n    temp = moment(val.parsed, \"hh:mm:ss a\")\n    valid = temp.isValid()\n    if (valid) {\n      formatted = temp.format(this.timeFormat)\n      parsed    = formatted\n    } else {\n      errors.push('invalid time')\n      formatted = value\n    }\n    return {\n      valid,\n      parsed,\n      formatted,\n      errors\n    }\n  },\n\n  ordinalFormatter(value, options={}) {\n    var parsed, formatted, errors = []\n    // remove all non-digits\n    var {parsed: string} = this.stringFormatter(value, options)\n    parsed = string.replace(/\\D/g, '')\n    // convert an empty string to a null\n    if (_.isEmpty(parsed))\n      parsed = null\n    // if have a parsed value (not blank/empty)\n    if (!_.isEmpty(parsed)) {\n      formatted = this.ordinalize(parsed)\n      // convert parsed value from string to integer storing the value as an\n      // integer.\n      parsed = parseInt(parsed)\n    } else {\n      formatted = parsed\n    }\n    return {\n      valid: true,\n      parsed,\n      formatted,\n      errors\n    }\n  },\n\n  parseDate(date) {\n    // Parse the date using supported formats. Deals with Firefox/Chrome\n    // behavior differences with \"new Date()\" behavior. Specifically an issue\n    // accepting \"Dec 2014\" as a date in Firefox. NOTE: This is not \"strict\"\n    // formatting, so a \"/\" is also allowed as well as not full 2 digit months\n    // or days, and with or without a comma.\n    return moment(date, [\n      // dates\n      'MMDDYYYY',\n      'MMM YYYY',\n      'MMM DD YYYY',\n      'M-D-YYYY',\n      // date times\n      'YYYY-MM-DD h:mm a',\n      'MMM DD YYYY h:mm a',\n      'M-D-YYYY h:mm a',\n      'YYYY-MM-DD h:mm a',\n      // date times with seconds\n      'YYYY-MM-DD h:mm:ss a',\n      'MMM DD YYYY h:mm:ss a',\n      'M-D-YYYY h:mm:ss a',\n      'YYYY-MM-DD h:mm:ss a'\n    ])\n  }\n}\n\nmodule.exports = Formatters\n"]}